// Code generated by go-bindata.
// sources:
// resources/en.yml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesEnYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xdb\x92\x1a\x21\x10\x86\xef\x7d\x8a\xae\xca\x75\xb6\xc6\xec\xd1\xb9\xcd\x93\xa0\xf4\x64\x48\x10\x2c\x68\x34\x9b\xa7\x4f\xa9\xb3\x55\xdb\x07\x66\xbd\xb4\x3f\x7e\x9a\x0f\xa6\x31\x8d\x1b\x00\x8f\x87\x70\x74\xb1\x8e\xb0\x01\x00\xf8\x0e\x97\x5c\xfc\x08\xa7\x1c\x12\xdd\xfe\x01\xb8\xa0\xfb\x33\xc2\xe4\x62\xc5\x0d\xc0\x37\xf8\x99\x5b\xf4\xb0\x47\x70\x1f\xab\xa1\x9e\x62\x20\xc2\x32\x42\x4e\x08\x2e\x79\x98\xc2\x19\x81\x30\xd1\x5c\x1f\xe0\xd3\x32\x17\x6b\x86\xdf\xad\xd2\x3d\x60\x0a\x31\x62\x59\x36\xa5\x4b\x86\xb9\x25\x5f\xd0\x2f\x19\x13\xbd\x03\xcd\xb9\x55\x97\xfc\x03\x6b\xd0\x25\xcf\xda\xa3\xd2\xf0\xba\xcf\x21\xb7\x44\x58\xea\xc8\xe8\x7f\x58\xf2\x82\xa7\x76\xdc\x5f\x1b\x1d\x18\x90\xe7\xf5\x72\x42\x51\xdf\xb2\x3a\x5d\x64\xfc\x0f\x5e\x9f\x0b\xca\x84\x47\x46\x4c\xb9\x15\x01\x3c\x71\x20\x9c\x65\xc2\x33\x03\x6a\xf8\x2b\xea\x2f\xbc\x8e\x67\x4c\x82\x78\x65\x04\x86\x5f\x33\x09\xe2\x8d\x11\x29\x28\x11\x3b\x7e\x50\xb5\xc5\x96\x9b\xc4\x68\xb4\xb1\x95\x36\x31\xaa\xc3\x6e\xa5\xd1\x50\x08\x75\x92\xb6\x6a\x51\x52\xed\x64\x41\x4a\xaf\x05\x19\x8e\x2d\xcc\x10\x6d\x50\x5a\xb6\x45\xed\xa4\xac\x44\xef\xf2\xf5\x0d\x5a\x96\x64\x1e\x07\xa1\x4a\x23\x4f\x83\xf2\x24\x91\xe7\x41\x59\x92\xc8\xcb\x60\x38\x92\xd0\xeb\xa0\x0d\x49\xe6\x6d\xd0\x7e\x24\xb3\xbb\x32\xc7\x16\x29\x9c\x62\x50\x73\x60\x99\x2e\xea\x89\x4a\x5d\xf7\x89\xa3\x31\xce\x1d\x43\x8c\x21\xeb\x07\x7f\xfb\x31\x72\xbf\x46\x4a\x98\xca\x17\xf4\x7d\x81\x0f\xe7\xe0\xd5\x09\x6f\x23\x77\xfd\x13\xbc\x4f\xe5\x75\x66\x11\x65\x44\x75\x38\x9d\xc7\xc1\x03\x26\x39\x5a\x2c\xe4\xab\x98\x8f\xab\xb1\x1a\xeb\x91\x46\xa6\x79\x8f\x66\x66\x97\xb5\x52\x3b\xd7\xde\x0b\xee\xe2\x9d\xec\xde\x43\x59\xc9\xef\x2f\xe9\xef\x71\x5d\xf3\x3f\x00\x00\xff\xff\xc6\xa5\x00\x9e\x1d\x08\x00\x00")

func resourcesEnYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEnYml,
		"resources/en.yml",
	)
}

func resourcesEnYml() (*asset, error) {
	bytes, err := resourcesEnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/en.yml", size: 2077, mode: os.FileMode(420), modTime: time.Unix(1523889291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/en.yml": resourcesEnYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"en.yml": &bintree{resourcesEnYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

