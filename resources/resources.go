// Code generated by go-bindata.
// sources:
// resources/en.yml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesEnYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x5d\xb2\xe2\x20\x10\x85\xdf\x5d\x45\x6f\x60\xaa\xc8\xf8\x9f\xdd\xa8\xb4\x13\xaa\x08\x58\x84\xe8\xcc\xac\xfe\x96\x7a\xef\x43\x9f\x6e\xa2\x8f\xe9\x8f\x03\x7c\xb4\xcd\xa9\x5f\x11\x79\xbe\x84\xf1\x14\xa7\x9e\x56\x44\x44\xbf\xe8\x91\x8b\xef\xe9\x96\x43\xaa\xe2\xcb\x29\xf9\x15\xd1\x25\xcf\xa9\x72\x99\x7a\x51\xfb\xcf\x25\xbf\x3e\x10\xa5\x79\x3c\x73\xe9\xc9\x09\x20\x0f\xcb\xe5\xc4\x50\xef\x44\xbd\x3e\x30\xfe\xb7\xac\x0f\x85\x31\x61\x2d\x88\x6b\x9e\x0b\x00\x1b\x09\x84\x3b\x26\x6c\x05\x30\x85\xbf\x50\xdf\xc9\x3a\xdf\x39\x01\xb1\x17\x04\x87\x3f\x43\x05\xe2\x20\x88\x14\x94\x88\xa3\xbc\xa8\xda\xa2\x93\x26\x39\x1a\xc7\xe8\xd0\x26\x47\x75\xd9\x0e\x8d\x86\x52\x59\x27\x69\xab\x16\x85\x6a\xaf\x16\xa4\xf4\x5a\x90\xe1\xd8\xc2\x0c\xd1\x06\xa5\x65\x5b\xd4\x11\x65\xa5\xfa\x0f\xbb\xcf\x69\x59\xc8\xac\x1d\xa8\xd2\xc8\xc6\x29\x4f\x88\x6c\x9d\xb2\x84\xc8\xce\x19\x8e\x10\xda\x3b\x6d\x08\x99\x83\xd3\x7e\x90\x39\x3e\x99\x71\x8e\x35\xdc\x62\x50\x73\x60\x98\x93\x2f\xec\x55\x8b\xa2\xae\x3c\x4f\xef\x71\x02\x98\xe4\xc6\x10\x63\xc8\xba\xe1\x5f\x3f\x41\x9e\x97\x48\x84\x6b\xf9\x40\xbf\x17\xf8\x70\x0f\x5e\xdd\xb0\x72\xaa\x38\xcb\xe0\x2f\xf8\x42\xa6\x65\xe6\x5b\x94\x11\xd5\xe0\x74\x9e\x04\x2f\x9c\x70\xb4\x58\xc8\xa7\x98\x9f\xa7\xb1\x0e\xd6\x22\x8d\x4c\xf3\x1d\xcd\xcc\x26\x6b\xa5\x36\x9e\xbd\x15\xdc\xc4\x1b\xd9\xad\x46\x59\xc8\x6f\x2f\x69\xef\xf1\x5c\xf3\x15\x00\x00\xff\xff\x1c\x21\x2f\x6c\x7c\x07\x00\x00")

func resourcesEnYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEnYml,
		"resources/en.yml",
	)
}

func resourcesEnYml() (*asset, error) {
	bytes, err := resourcesEnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/en.yml", size: 1916, mode: os.FileMode(420), modTime: time.Unix(1523535644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/en.yml": resourcesEnYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"en.yml": &bintree{resourcesEnYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

